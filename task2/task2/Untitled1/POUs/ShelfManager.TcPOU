<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="ShelfManager" Id="{6cb382e6-6f10-4a3a-984f-4bcc52c8f303}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ShelfManager
VAR_INPUT
	ErrorReset : BOOL;
END_VAR
VAR_OUTPUT
	ErrorSameID : BOOL;
	ErrorNotEnoghPlace : BOOL;
	ErrorNothingToBeTakenOut : BOOL;
	ErrorNotFound : BOOL;
	ErrorCantStoreWithoutProperties : BOOL;
	ErrorSerchWithoutPartID : BOOL;
	ErrorSpaceDoesNotExist : BOOL;
END_VAR
VAR CONSTANT
	NOFSPACES : SINT := 42;
	NOFCOLUMNS : SINT := 7;
	NOFROWS : SINT := 6;
END_VAR
VAR
	initialized : BOOL;
	x : SINT;
	y : SINT;
	Z : SINT;
	Spaces : ARRAY [0..NOFSPACES - 1] OF Space;	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT initialized THEN
	FOR x := 0 TO (NOFROWS - 1) DO
		FOR y := 0 TO (NOFCOLUMNS - 1) DO
			Spaces[Z].Column := y;
			Spaces[Z].Row := x;
			Spaces[Z].partID := '';
			Spaces[Z].Weight := Empty;
			Z := Z + 1;
		END_FOR

	END_FOR
	initialized := TRUE;
END_IF


IF ErrorReset THEN
	ErrorSameID := FALSE;
	ErrorNotEnoghPlace := FALSE;
	ErrorNothingToBeTakenOut := FALSE;
	ErrorNotFound := FALSE;
	ErrorCantStoreWithoutProperties := FALSE;
	ErrorSerchWithoutPartID := FALSE;
	ErrorSpaceDoesNotExist := FALSe;
END_IF

]]></ST>
    </Implementation>
    <Method Name="FindPart" Id="{05bfc486-78f5-46d9-ae41-e2149d3c5ac3}">
      <Declaration><![CDATA[METHOD FindPart : BOOL;
VAR_INPUT
	SerchingPartID	: STRING;
END_VAR
VAR_OUTPUT
	FoundPart : Space;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FindPart := FALSE;
IF (SerchingPartID = '') THEN
	ErrorSerchWithoutPartID := TRUE;
	RETURN;
END_IF;

FOR x := 0 TO (NOFSPACES - 1) DO
	IF Spaces[x].partID = SerchingPartID  THEN
		FoundPart := Spaces[x];
		FindPart := TRUE;
		RETURN;
	END_IF
	IF x = (NOFSPACES - 1) THEN
		FindPart := FALSE;
		RETURN;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Property Name="NextFreeSpaceHeavy" Id="{62ecaf00-09bc-4077-8394-d98418bb11c7}">
      <Declaration><![CDATA[PROPERTY NextFreeSpaceHeavy : Space

]]></Declaration>
      <Get Name="Get" Id="{26128039-91a7-4d3d-a1b7-fa1f4b5eff56}">
        <Declaration><![CDATA[VAR
	n : SINT;
	y : SINT;
	actNextFree : Space;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[actNextFree.Column := -1;

FOR y := 0 TO NOFROWS - 1 DO
	FOR n := 0 TO NOFSPACES - 1 DO
		IF Spaces[n].Row = y AND Spaces[n].PartID = '' AND Spaces[n].Column	> actNextFree.Column THEN
			actNextFree := Spaces[n];
		END_IF
	END_FOR
	IF NOT (actNextFree.Column = -1) THEN
		NextFreeSpaceHeavy := actNextFree;
		RETURN;
	END_IF
END_FOR

ErrorNotEnoghPlace := TRUE;	]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="NextFreeSpaceLight" Id="{702f7696-4367-4442-bc00-8d5b5208c4f7}">
      <Declaration><![CDATA[PROPERTY NextFreeSpaceLight : Space]]></Declaration>
      <Get Name="Get" Id="{ccf7b35b-3240-4295-8e7a-d6a3a7f2b4c5}">
        <Declaration><![CDATA[VAR
	n : SINT;
	y : SINT;
	actNextFree : Space;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[actNextFree.Column := NOFCOLUMNS;

FOR y := NOFROWS - 1 TO 0 BY -1 DO
	FOR n := 0 TO NOFSPACES - 1 DO
		IF Spaces[n].Row = y AND Spaces[n].PartID = '' AND Spaces[n].Column	< actNextFree.Column THEN
			actNextFree := Spaces[n];
		END_IF
	END_FOR
	IF NOT (actNextFree.Column = NOFCOLUMNS) THEN
		NextFreeSpaceLight := actNextFree;
		RETURN;
	END_IF
END_FOR

ErrorNotEnoghPlace := TRUE;	]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="NextOccupiedSpace" Id="{3e212d41-2265-499d-a71b-e29a48145454}">
      <Declaration><![CDATA[PROPERTY NextOccupiedSpace : Space
]]></Declaration>
      <Get Name="Get" Id="{97939dc7-1afa-4d3c-9628-9fa75401eae3}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[FOR x := 0 TO (NOFSPACES - 1) DO
	IF NOT (Spaces[x].partID = '') THEN
		NextOccupiedSpace := Spaces[x];
		RETURN;
	ELSIF x = (NOFSPACES - 1) THEN
		ErrorNothingToBeTakenOut := TRUE;	
		RETURN;	
	END_IF
END_FOR]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="RemoveByID" Id="{183a6651-4bf9-425f-ad05-52fdff5ea27c}">
      <Declaration><![CDATA[METHOD RemoveByID : BOOL
VAR_INPUT
	removedPartID	: STRING;
END_VAR
VAR	
	foundPart : Space;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF FindPart(SerchingPartID := removedPartID,FoundPart => foundPart)THEN
	RemoveByID := RemoveExplicit(column := foundPart.Column,row := foundPart.Row);
ELSE
	RemoveByID := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveExplicit" Id="{dcca1800-9a70-480c-bb67-ec42ba49aa72}">
      <Declaration><![CDATA[METHOD RemoveExplicit : BOOL
VAR_INPUT
	Column : SINT;
	Row	: SINT;
END_VAR
VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[RemoveExplicit := FALSE;

IF (Column < 0 OR Column > 6) OR
   (Row    < 0 OR Row    > 5) THEN
	ErrorSpaceDoesNotExist := TRUE;
	RETURN;
END_IF

FOR x := 0 TO (NOFSPACES - 1) DO
	IF Spaces[x].Column = column AND Spaces[x].Row = row THEN
		IF (Spaces[x].partID = '') THEN
			ErrorNothingToBeTakenOut := TRUE;
			RETURN;
		ELSE
			FOR y := x + 1 TO (NOFSPACES - 1) DO
				Spaces[y-1] := Spaces[y];
			END_FOR
			Spaces[NOFSPACES - 1].Column := column;
			Spaces[NOFSPACES - 1].Row := row;
			Spaces[NOFSPACES - 1].partID := '';
			Spaces[NOFSPACES - 1].Weight := Empty;
			RemoveExplicit := TRUE;
			RETURN;
		END_IF
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveFIFO" Id="{964ecf5d-4ab2-41af-b4c9-a8def4edd935}">
      <Declaration><![CDATA[METHOD RemoveFIFO : BOOL
VAR_INPUT
END_VAR
VAR	
	removedFifoSpace : Space;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[RemoveFIFO := FALSE;

removedFifoSpace := NextOccupiedSpace;
IF ErrorNothingToBeTakenOut THEN
	RETURN;
END_IF

RemoveFIFO := RemoveExplicit(column := removedFifoSpace.Column, row := removedFifoSpace.Row);]]></ST>
      </Implementation>
    </Method>
    <Method Name="StoreExplicit" Id="{35cbab21-bf62-4c43-8b7f-4d81730ae33e}">
      <Declaration><![CDATA[METHOD StoreExplicit : BOOL
VAR_INPUT
	storedPart : Space;
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[StoreExplicit := FALSE;	

IF (storedPart.Column < 0 OR storedPart.Column > 6) OR
   (storedPart.Row    < 0 OR storedPart.Row    > 5) THEN
	ErrorSpaceDoesNotExist := TRUE;
	RETURN;
ELSIF storedPart.partID = '' OR storedPart.Weight = Empty THEN
	ErrorCantStoreWithoutProperties := TRUE;
	RETURN;
ELSIF FindPart(SerchingPartID := storedPart.partID) THEN
	ErrorSameID := TRUE;
	RETURN;
END_IF	

FOR x := 0 TO (NOFSPACES - 1) DO
	IF Spaces[x].Column = storedPart.Column AND Spaces[x].Row = storedPart.Row THEN
		FOR y := x + 1 TO (NOFSPACES - 1) DO
			Spaces[y-1] := Spaces[y];
		END_FOR
		Spaces[(NOFSPACES - 1)] := storedPart;
		StoreExplicit := TRUE;
		RETURN;				
	END_IF
END_FOR

]]></ST>
      </Implementation>
    </Method>
    <Method Name="StoreFIFO" Id="{4b27e7bb-6e51-47e0-a6e5-9a603ac19d42}">
      <Declaration><![CDATA[METHOD StoreFIFO : BOOL
VAR_INPUT
	storedFifoID : STRING;
	storedFifoWeight : Weight;
END_VAR
VAR	
	storeFifoSpace : Space;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[StoreFIFO := FALSE;

IF storedFifoWeight = Weight.Heavy THEN
	storeFifoSpace := NextFreeSpaceHeavy;
ELSE
	storeFifoSpace := NextFreeSpaceLight;
END_IF

IF ErrorNotEnoghPlace THEN
	RETURN;
END_IF

storeFifoSpace.PartID := storedFifoID;
storeFifoSpace.Weight := storedFifoWeight;

storeFifoSpace.partID := storedFifoID;

StoreFIFO := StoreExplicit(storedPart := storeFifoSpace);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>